/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Authentication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logs in a user using the provided login model. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The login credentials. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestUserLoginDto"];
                    "text/json": components["schemas"]["RequestUserLoginDto"];
                    "application/*+json": components["schemas"]["RequestUserLoginDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AuthenticationResult"];
                        "application/json": components["schemas"]["AuthenticationResult"];
                        "text/json": components["schemas"]["AuthenticationResult"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Authentication/refreshToken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refreshes the authentication token using the provided token model. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The token refresh request. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TokenModel"];
                    "text/json": components["schemas"]["TokenModel"];
                    "application/*+json": components["schemas"]["TokenModel"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AuthenticationResult"];
                        "application/json": components["schemas"]["AuthenticationResult"];
                        "text/json": components["schemas"]["AuthenticationResult"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Branch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all branches */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchDto"][];
                        "application/json": components["schemas"]["ResponseBranchDto"][];
                        "text/json": components["schemas"]["ResponseBranchDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Create new branch */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Branch request model to be added */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestBranchDto"];
                    "text/json": components["schemas"]["RequestBranchDto"];
                    "application/*+json": components["schemas"]["RequestBranchDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchDto"];
                        "application/json": components["schemas"]["ResponseBranchDto"];
                        "text/json": components["schemas"]["ResponseBranchDto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Branch/ByRol": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all branches by role from user logged in */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchDto"][];
                        "application/json": components["schemas"]["ResponseBranchDto"][];
                        "text/json": components["schemas"]["ResponseBranchDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Branch/{branchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get branch with specific id */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    branchId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchDto"];
                        "application/json": components["schemas"]["ResponseBranchDto"];
                        "text/json": components["schemas"]["ResponseBranchDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Update existing branch */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    branchId: number;
                };
                cookie?: never;
            };
            /** @description Branch request model to be added */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestBranchDto"];
                    "text/json": components["schemas"]["RequestBranchDto"];
                    "application/*+json": components["schemas"]["RequestBranchDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchDto"];
                        "application/json": components["schemas"]["ResponseBranchDto"];
                        "text/json": components["schemas"]["ResponseBranchDto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a branch by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the branch to delete. */
                    branchId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Branch/{branchId}/Holiday": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all branch's holidays */
        get: {
            parameters: {
                query?: {
                    /** @description Year */
                    year?: number;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    branchId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchHolidayDto"][];
                        "application/json": components["schemas"]["ResponseBranchHolidayDto"][];
                        "text/json": components["schemas"]["ResponseBranchHolidayDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Assign holidays to a branch */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    branchId: number;
                };
                cookie?: never;
            };
            /** @description List of holidays */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestBranchHolidayDto"][];
                    "text/json": components["schemas"]["RequestBranchHolidayDto"][];
                    "application/*+json": components["schemas"]["RequestBranchHolidayDto"][];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/BranchHoliday/{branchHolidayId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get branch holiday */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch holiday Id */
                    branchHolidayId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchHolidayDto"];
                        "application/json": components["schemas"]["ResponseBranchHolidayDto"];
                        "text/json": components["schemas"]["ResponseBranchHolidayDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/BranchSchedule/{branchScheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get branch schedule with specific id */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch schedule id */
                    branchScheduleId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchScheduleDto"];
                        "application/json": components["schemas"]["ResponseBranchScheduleDto"];
                        "text/json": components["schemas"]["ResponseBranchScheduleDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Assign new blocks of branch's schedule */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch schedule id */
                    branchScheduleId: number;
                };
                cookie?: never;
            };
            /** @description List Block request model to be assign */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestBranchScheduleBlockDto"][];
                    "text/json": components["schemas"]["RequestBranchScheduleBlockDto"][];
                    "application/*+json": components["schemas"]["RequestBranchScheduleBlockDto"][];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Branch/{branchId}/Schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get schedules by branch */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    branchId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchScheduleDto"];
                        "application/json": components["schemas"]["ResponseBranchScheduleDto"];
                        "text/json": components["schemas"]["ResponseBranchScheduleDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Assign schedules to a branch */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    branchId: number;
                };
                cookie?: never;
            };
            /** @description List of schedules */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestBranchScheduleDto"][];
                    "text/json": components["schemas"]["RequestBranchScheduleDto"][];
                    "application/*+json": components["schemas"]["RequestBranchScheduleDto"][];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/BranchScheduleBlock/{branchSchedule\u00DFlockId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get block with specific id */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Block id */
                    "branchSchedule\u00DFlockId": number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchScheduleBlockDto"];
                        "application/json": components["schemas"]["ResponseBranchScheduleBlockDto"];
                        "text/json": components["schemas"]["ResponseBranchScheduleBlockDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Schedule/{scheduleId}/Block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get blocks by schedule */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Schedule id */
                    scheduleId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchScheduleBlockDto"][];
                        "application/json": components["schemas"]["ResponseBranchScheduleBlockDto"][];
                        "text/json": components["schemas"]["ResponseBranchScheduleBlockDto"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/BranchScheduleBlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new block of branch's schedule */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Block request model to be added */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestBranchScheduleBlockDto"];
                    "text/json": components["schemas"]["RequestBranchScheduleBlockDto"];
                    "application/*+json": components["schemas"]["RequestBranchScheduleBlockDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchScheduleBlockDto"];
                        "application/json": components["schemas"]["ResponseBranchScheduleBlockDto"];
                        "text/json": components["schemas"]["ResponseBranchScheduleBlockDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/BranchScheduleBlock/{blockId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update existing block of branch's schedule */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Block branch's schedule id */
                    blockId: number;
                };
                cookie?: never;
            };
            /** @description Block request model to be updated */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestBranchScheduleBlockDto"];
                    "text/json": components["schemas"]["RequestBranchScheduleBlockDto"];
                    "application/*+json": components["schemas"]["RequestBranchScheduleBlockDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseBranchScheduleBlockDto"];
                        "application/json": components["schemas"]["ResponseBranchScheduleBlockDto"];
                        "text/json": components["schemas"]["ResponseBranchScheduleBlockDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a block by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the block to delete. */
                    blockId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Province/{provinceId}/Canton": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all cantons associated with a specific province. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the province. */
                    provinceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseCantonDto"][];
                        "application/json": components["schemas"]["ResponseCantonDto"][];
                        "text/json": components["schemas"]["ResponseCantonDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Canton/{idCanton}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves details of a specific canton by its ID. */
        get: {
            parameters: {
                query?: {
                    /** @description The ID of the canton. */
                    id?: number;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    idCanton: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseCantonDto"];
                        "application/json": components["schemas"]["ResponseCantonDto"];
                        "text/json": components["schemas"]["ResponseCantonDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all categories. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseCategoryDto"][];
                        "application/json": components["schemas"]["ResponseCategoryDto"][];
                        "text/json": components["schemas"]["ResponseCategoryDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a list of all customers. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseCustomerDto"][];
                        "application/json": components["schemas"]["ResponseCustomerDto"][];
                        "text/json": components["schemas"]["ResponseCustomerDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Customer/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific customer by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the customer. */
                    customerId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseCustomerDto"];
                        "application/json": components["schemas"]["ResponseCustomerDto"];
                        "text/json": components["schemas"]["ResponseCustomerDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deletes a customer by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the holiday to delete. */
                    customerId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseCustomerDto"];
                        "application/json": components["schemas"]["ResponseCustomerDto"];
                        "text/json": components["schemas"]["ResponseCustomerDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Canton/{cantonId}/District": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all districts associated with a specific canton. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the canton. */
                    cantonId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseDistrictDto"][];
                        "application/json": components["schemas"]["ResponseDistrictDto"][];
                        "text/json": components["schemas"]["ResponseDistrictDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/District/{idDistrict}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves details of a specific district by its ID. */
        get: {
            parameters: {
                query?: {
                    /** @description The ID of the district. */
                    id?: number;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    idDistrict: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseDistrictDto"];
                        "application/json": components["schemas"]["ResponseDistrictDto"];
                        "text/json": components["schemas"]["ResponseDistrictDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Holiday": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all holidays. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseHolidayDto"][];
                        "application/json": components["schemas"]["ResponseHolidayDto"][];
                        "text/json": components["schemas"]["ResponseHolidayDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new holiday. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The holiday data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestHolidayDto"];
                    "text/json": components["schemas"]["RequestHolidayDto"];
                    "application/*+json": components["schemas"]["RequestHolidayDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseHolidayDto"];
                        "application/json": components["schemas"]["ResponseHolidayDto"];
                        "text/json": components["schemas"]["ResponseHolidayDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Holiday/{holidayId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific holiday by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the holiday. */
                    holidayId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseHolidayDto"];
                        "application/json": components["schemas"]["ResponseHolidayDto"];
                        "text/json": components["schemas"]["ResponseHolidayDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Updates an existing holiday by its ID. */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the holiday to update. */
                    holidayId: number;
                };
                cookie?: never;
            };
            /** @description The updated holiday data. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestHolidayDto"];
                    "text/json": components["schemas"]["RequestHolidayDto"];
                    "application/*+json": components["schemas"]["RequestHolidayDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseHolidayDto"];
                        "application/json": components["schemas"]["ResponseHolidayDto"];
                        "text/json": components["schemas"]["ResponseHolidayDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a holiday by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the holiday to delete. */
                    holidayId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all inventories for a given branch. */
        get: {
            parameters: {
                query?: {
                    /** @description The ID of the branch. */
                    inventoryId?: number;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryDto"][];
                        "application/json": components["schemas"]["ResponseInventoryDto"][];
                        "text/json": components["schemas"]["ResponseInventoryDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new inventory for a given branch. */
        post: {
            parameters: {
                query?: {
                    /** @description The ID of the branch. */
                    branchId?: number;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The inventory data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestInventoryDto"];
                    "text/json": components["schemas"]["RequestInventoryDto"];
                    "application/*+json": components["schemas"]["RequestInventoryDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryDto"];
                        "application/json": components["schemas"]["ResponseInventoryDto"];
                        "text/json": components["schemas"]["ResponseInventoryDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Inventory/{inventoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific inventory by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the inventory. */
                    inventoryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryDto"];
                        "application/json": components["schemas"]["ResponseInventoryDto"];
                        "text/json": components["schemas"]["ResponseInventoryDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Updates an existing inventory for a given branch. */
        put: {
            parameters: {
                query?: {
                    /** @description The ID of the branch. */
                    branchId?: number;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the inventory to update. */
                    inventoryId: number;
                };
                cookie?: never;
            };
            /** @description The updated inventory data. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestInventoryDto"];
                    "text/json": components["schemas"]["RequestInventoryDto"];
                    "application/*+json": components["schemas"]["RequestInventoryDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryDto"];
                        "application/json": components["schemas"]["ResponseInventoryDto"];
                        "text/json": components["schemas"]["ResponseInventoryDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a specific inventory by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the inventory to delete. */
                    inventoryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/InventoryProduct/{inventoryProductId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific inventory product by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the inventory product. */
                    inventoryProductId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryProductDto"];
                        "application/json": components["schemas"]["ResponseInventoryProductDto"];
                        "text/json": components["schemas"]["ResponseInventoryProductDto"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Updates an existing inventory product. */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the inventory product to update. */
                    inventoryProductId: number;
                };
                cookie?: never;
            };
            /** @description The updated inventory product data. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestInventoryProductDto"];
                    "text/json": components["schemas"]["RequestInventoryProductDto"];
                    "application/*+json": components["schemas"]["RequestInventoryProductDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryProductDto"];
                        "application/json": components["schemas"]["ResponseInventoryProductDto"];
                        "text/json": components["schemas"]["ResponseInventoryProductDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Inventory/{inventoryId}/Products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all inventory products for a given inventory. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the inventory. */
                    inventoryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryProductDto"][];
                        "application/json": components["schemas"]["ResponseInventoryProductDto"][];
                        "text/json": components["schemas"]["ResponseInventoryProductDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Product/{productId}/Inventories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all inventory products for a given product. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the product. */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryProductDto"][];
                        "application/json": components["schemas"]["ResponseInventoryProductDto"][];
                        "text/json": components["schemas"]["ResponseInventoryProductDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/InventoryProduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a new inventory product. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The inventory product data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestInventoryProductDto"];
                    "text/json": components["schemas"]["RequestInventoryProductDto"];
                    "application/*+json": components["schemas"]["RequestInventoryProductDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryProductDto"];
                        "application/json": components["schemas"]["ResponseInventoryProductDto"];
                        "text/json": components["schemas"]["ResponseInventoryProductDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/InventoryProduct/Bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates multiple inventory products in bulk. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description A collection of inventory product data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestInventoryProductDto"][];
                    "text/json": components["schemas"]["RequestInventoryProductDto"][];
                    "application/*+json": components["schemas"]["RequestInventoryProductDto"][];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/InventoryProductTransaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a new inventory product movement record. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The inventory product movement data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestInventoryProductTransactionDto"];
                    "text/json": components["schemas"]["RequestInventoryProductTransactionDto"];
                    "application/*+json": components["schemas"]["RequestInventoryProductTransactionDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryProductTransactionDto"];
                        "application/json": components["schemas"]["ResponseInventoryProductTransactionDto"];
                        "text/json": components["schemas"]["ResponseInventoryProductTransactionDto"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Inventory/{inventoryId}/Transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all inventory product movements for a given inventory. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the inventory. */
                    inventoryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryProductTransactionDto"][];
                        "application/json": components["schemas"]["ResponseInventoryProductTransactionDto"][];
                        "text/json": components["schemas"]["ResponseInventoryProductTransactionDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Product/{productId}/Transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all inventory product movements for a given product. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the product. */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInventoryProductTransactionDto"][];
                        "application/json": components["schemas"]["ResponseInventoryProductTransactionDto"][];
                        "text/json": components["schemas"]["ResponseInventoryProductTransactionDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all invoices. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInvoiceDto"][];
                        "application/json": components["schemas"]["ResponseInvoiceDto"][];
                        "text/json": components["schemas"]["ResponseInvoiceDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new invoice. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The invoice data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestInvoiceDto"];
                    "text/json": components["schemas"]["RequestInvoiceDto"];
                    "application/*+json": components["schemas"]["RequestInvoiceDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInvoiceDto"];
                        "application/json": components["schemas"]["ResponseInvoiceDto"];
                        "text/json": components["schemas"]["ResponseInvoiceDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Invoice/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific invoice by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the invoice. */
                    invoiceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInvoiceDto"];
                        "application/json": components["schemas"]["ResponseInvoiceDto"];
                        "text/json": components["schemas"]["ResponseInvoiceDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Invoice/{invoiceId}/InvoiceDetail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all detail invoices associated with a specific invoice. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the invoice. */
                    invoiceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInvoiceDetailDto"][];
                        "application/json": components["schemas"]["ResponseInvoiceDetailDto"][];
                        "text/json": components["schemas"]["ResponseInvoiceDetailDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Invoice/{invoiceId}/InvoiceDetail/{invoiceDetailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific detail invoice by its ID and associated invoice ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the detail invoice. */
                    invoiceDetailId: number;
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseInvoiceDetailDto"];
                        "application/json": components["schemas"]["ResponseInvoiceDetailDto"];
                        "text/json": components["schemas"]["ResponseInvoiceDetailDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves information about the currently authenticated user. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseMeDto"];
                        "application/json": components["schemas"]["ResponseMeDto"];
                        "text/json": components["schemas"]["ResponseMeDto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all orders. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseOrderDto"][];
                        "application/json": components["schemas"]["ResponseOrderDto"][];
                        "text/json": components["schemas"]["ResponseOrderDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new order. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The order data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestOrderDto"];
                    "text/json": components["schemas"]["RequestOrderDto"];
                    "application/*+json": components["schemas"]["RequestOrderDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseOrderDto"];
                        "application/json": components["schemas"]["ResponseOrderDto"];
                        "text/json": components["schemas"]["ResponseOrderDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Order/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an order by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the order to retrieve. */
                    orderId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseOrderDto"];
                        "application/json": components["schemas"]["ResponseOrderDto"];
                        "text/json": components["schemas"]["ResponseOrderDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/PaymentType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all payment types */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponsePaymentTypeDto"][];
                        "application/json": components["schemas"]["ResponsePaymentTypeDto"][];
                        "text/json": components["schemas"]["ResponsePaymentTypeDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a list of products, optionally excluding those associated with a specified inventory. */
        get: {
            parameters: {
                query?: {
                    /** @description Whether to exclude products associated with the inventory. */
                    excludeProductsInventory?: boolean;
                    /** @description The ID of the inventory to filter products by. */
                    inventoryId?: number;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseProductDto"][];
                        "application/json": components["schemas"]["ResponseProductDto"][];
                        "text/json": components["schemas"]["ResponseProductDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new product. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The product data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestProductDto"];
                    "text/json": components["schemas"]["RequestProductDto"];
                    "application/*+json": components["schemas"]["RequestProductDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseProductDto"];
                        "application/json": components["schemas"]["ResponseProductDto"];
                        "text/json": components["schemas"]["ResponseProductDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Product/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a product by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the product to retrieve. */
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseProductDto"];
                        "application/json": components["schemas"]["ResponseProductDto"];
                        "text/json": components["schemas"]["ResponseProductDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Updates an existing product by its ID. */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the product to update. */
                    productId: number;
                };
                cookie?: never;
            };
            /** @description The updated product data. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestProductDto"];
                    "text/json": components["schemas"]["RequestProductDto"];
                    "application/*+json": components["schemas"]["RequestProductDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseProductDto"];
                        "application/json": components["schemas"]["ResponseProductDto"];
                        "text/json": components["schemas"]["ResponseProductDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Province": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all provinces */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseProvinceDto"][];
                        "application/json": components["schemas"]["ResponseProvinceDto"][];
                        "text/json": components["schemas"]["ResponseProvinceDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Province/{provinceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get province with specific id */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Province id */
                    provinceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseProvinceDto"];
                        "application/json": components["schemas"]["ResponseProvinceDto"];
                        "text/json": components["schemas"]["ResponseProvinceDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all reservations */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseReservationDto"][];
                        "application/json": components["schemas"]["ResponseReservationDto"][];
                        "text/json": components["schemas"]["ResponseReservationDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new reservation */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Reservation request model to be added */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestReservationDto"];
                    "text/json": components["schemas"]["RequestReservationDto"];
                    "application/*+json": components["schemas"]["RequestReservationDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseReservationDto"];
                        "application/json": components["schemas"]["ResponseReservationDto"];
                        "text/json": components["schemas"]["ResponseReservationDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Branch/{branchId}/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all reservations by branch with filter option with start date and end date */
        get: {
            parameters: {
                query?: {
                    /** @description Start date */
                    startDate?: string;
                    /** @description End date */
                    endDate?: string;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    branchId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseReservationCalendarAgendaDto"][][];
                        "application/json": components["schemas"]["ResponseReservationCalendarAgendaDto"][][];
                        "text/json": components["schemas"]["ResponseReservationCalendarAgendaDto"][][];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Reservation/{reservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all reservations by branch */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    reservationId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseReservationDto"];
                        "application/json": components["schemas"]["ResponseReservationDto"];
                        "text/json": components["schemas"]["ResponseReservationDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Update an existing reservation */
        put: {
            parameters: {
                query?: {
                    /** @description Service id */
                    serviceId?: number;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    reservationId: string;
                };
                cookie?: never;
            };
            /** @description Reservation request model to be updated */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestReservationDto"];
                    "text/json": components["schemas"]["RequestReservationDto"];
                    "application/*+json": components["schemas"]["RequestReservationDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseReservationDto"];
                        "application/json": components["schemas"]["ResponseReservationDto"];
                        "text/json": components["schemas"]["ResponseReservationDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Branch/{branchId}/date-availability/{date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get availablity for a branch in specific date */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    branchId: number;
                    /** @description Date to filter */
                    date: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string[];
                        "application/json": string[];
                        "text/json": string[];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ReservationDetail/{reservationDetailId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get reservation detail with specific id */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Reservation detail Id */
                    reservationDetailId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseReservationDetailDto"];
                        "application/json": components["schemas"]["ResponseReservationDetailDto"];
                        "text/json": components["schemas"]["ResponseReservationDetailDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Reservation/{id}/Detail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all reservation's details by branch */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseReservationDetailDto"];
                        "application/json": components["schemas"]["ResponseReservationDetailDto"];
                        "text/json": components["schemas"]["ResponseReservationDetailDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Create details reservation */
        post: {
            parameters: {
                query?: {
                    /** @description Branch id */
                    branchId?: number;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    id: string;
                };
                cookie?: never;
            };
            /** @description List of details to be added */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestReservationDetailDto"][];
                    "text/json": components["schemas"]["RequestReservationDetailDto"][];
                    "application/*+json": components["schemas"]["RequestReservationDetailDto"][];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ReservationQuestion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all reservation's questions */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseReservationQuestionDto"][];
                        "application/json": components["schemas"]["ResponseReservationQuestionDto"][];
                        "text/json": components["schemas"]["ResponseReservationQuestionDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ReservationQuestion/{reservationQuestionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get reservation question with specific id */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Reservation question Id */
                    reservationQuestionId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseReservationQuestionDto"];
                        "application/json": components["schemas"]["ResponseReservationQuestionDto"];
                        "text/json": components["schemas"]["ResponseReservationQuestionDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all roles */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseRoleDto"][];
                        "application/json": components["schemas"]["ResponseRoleDto"][];
                        "text/json": components["schemas"]["ResponseRoleDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all schedules. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseScheduleDto"][];
                        "application/json": components["schemas"]["ResponseScheduleDto"][];
                        "text/json": components["schemas"]["ResponseScheduleDto"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new schedule. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The schedule data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestScheduleDto"];
                    "text/json": components["schemas"]["RequestScheduleDto"];
                    "application/*+json": components["schemas"]["RequestScheduleDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseScheduleDto"];
                        "application/json": components["schemas"]["ResponseScheduleDto"];
                        "text/json": components["schemas"]["ResponseScheduleDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Schedule/{scheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific schedule by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the schedule. */
                    scheduleId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseScheduleDto"];
                        "application/json": components["schemas"]["ResponseScheduleDto"];
                        "text/json": components["schemas"]["ResponseScheduleDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Updates an existing schedule by its ID. */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the schedule to update. */
                    scheduleId: number;
                };
                cookie?: never;
            };
            /** @description The updated schedule data. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestScheduleDto"];
                    "text/json": components["schemas"]["RequestScheduleDto"];
                    "application/*+json": components["schemas"]["RequestScheduleDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseScheduleDto"];
                        "application/json": components["schemas"]["ResponseScheduleDto"];
                        "text/json": components["schemas"]["ResponseScheduleDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a specific schedule by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the schedule to delete. */
                    scheduleId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Service": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all services */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseServiceDto"][];
                        "application/json": components["schemas"]["ResponseServiceDto"][];
                        "text/json": components["schemas"]["ResponseServiceDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Create new service */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Service request model to be added */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestServiceDto"];
                    "text/json": components["schemas"]["RequestServiceDto"];
                    "application/*+json": components["schemas"]["RequestServiceDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseServiceDto"];
                        "application/json": components["schemas"]["ResponseServiceDto"];
                        "text/json": components["schemas"]["ResponseServiceDto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Service/{serviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get service with specific id */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Service id */
                    serviceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseServiceDto"];
                        "application/json": components["schemas"]["ResponseServiceDto"];
                        "text/json": components["schemas"]["ResponseServiceDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Update existing service */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Service id */
                    serviceId: number;
                };
                cookie?: never;
            };
            /** @description Service request model to be updated */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestServiceDto"];
                    "text/json": components["schemas"]["RequestServiceDto"];
                    "application/*+json": components["schemas"]["RequestServiceDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseServiceDto"];
                        "application/json": components["schemas"]["ResponseServiceDto"];
                        "text/json": components["schemas"]["ResponseServiceDto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a service by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the service to delete. */
                    serviceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseServiceDto"];
                        "application/json": components["schemas"]["ResponseServiceDto"];
                        "text/json": components["schemas"]["ResponseServiceDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tax": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all taxes. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseTaxDto"][];
                        "application/json": components["schemas"]["ResponseTaxDto"][];
                        "text/json": components["schemas"]["ResponseTaxDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new tax. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Tax request model to be added */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestTaxDto"];
                    "text/json": components["schemas"]["RequestTaxDto"];
                    "application/*+json": components["schemas"]["RequestTaxDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseTaxDto"];
                        "application/json": components["schemas"]["ResponseTaxDto"];
                        "text/json": components["schemas"]["ResponseTaxDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tax/{taxId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the exact tax by id. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Id to look for */
                    taxId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseTaxDto"];
                        "application/json": components["schemas"]["ResponseTaxDto"];
                        "text/json": components["schemas"]["ResponseTaxDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Updates a tax by its ID. */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Id to look for */
                    taxId: number;
                };
                cookie?: never;
            };
            /** @description Tax request model to be updated */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestTaxDto"];
                    "text/json": components["schemas"]["RequestTaxDto"];
                    "application/*+json": components["schemas"]["RequestTaxDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseTaxDto"];
                        "application/json": components["schemas"]["ResponseTaxDto"];
                        "text/json": components["schemas"]["ResponseTaxDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a tax by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Id to look for */
                    taxId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/TypeService": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all service types */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseTypeServiceDto"][];
                        "application/json": components["schemas"]["ResponseTypeServiceDto"][];
                        "text/json": components["schemas"]["ResponseTypeServiceDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/UnitMeasure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all unit of measures */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseUnitMeasureDto"][];
                        "application/json": components["schemas"]["ResponseUnitMeasureDto"][];
                        "text/json": components["schemas"]["ResponseUnitMeasureDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new unit of measure */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Unit of measure data transfer object */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestUnitMeasureDto"];
                    "text/json": components["schemas"]["RequestUnitMeasureDto"];
                    "application/*+json": components["schemas"]["RequestUnitMeasureDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseUnitMeasureDto"];
                        "application/json": components["schemas"]["ResponseUnitMeasureDto"];
                        "text/json": components["schemas"]["ResponseUnitMeasureDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/UnitMeasure/{unitMeasureId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get unit of measure by id */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Unit of measure id */
                    unitMeasureId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseUnitMeasureDto"];
                        "application/json": components["schemas"]["ResponseUnitMeasureDto"];
                        "text/json": components["schemas"]["ResponseUnitMeasureDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Update an existing unit of measure */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Unit of measure id */
                    unitMeasureId: number;
                };
                cookie?: never;
            };
            /** @description Unit of measure data transfer object */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestUnitMeasureDto"];
                    "text/json": components["schemas"]["RequestUnitMeasureDto"];
                    "application/*+json": components["schemas"]["RequestUnitMeasureDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseUnitMeasureDto"];
                        "application/json": components["schemas"]["ResponseUnitMeasureDto"];
                        "text/json": components["schemas"]["ResponseUnitMeasureDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        /** Delete an existing unit of measure */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Unit of measure id */
                    unitMeasureId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/User": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all users */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseUserDto"][];
                        "application/json": components["schemas"]["ResponseUserDto"][];
                        "text/json": components["schemas"]["ResponseUserDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new user. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The user data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestUserDto"];
                    "text/json": components["schemas"]["RequestUserDto"];
                    "application/*+json": components["schemas"]["RequestUserDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseUserDto"];
                        "application/json": components["schemas"]["ResponseUserDto"];
                        "text/json": components["schemas"]["ResponseUserDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/User/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates an existing user by ID. */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the user to update. */
                    userId: number;
                };
                cookie?: never;
            };
            /** @description The updated user data. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestUserDto"];
                    "text/json": components["schemas"]["RequestUserDto"];
                    "application/*+json": components["schemas"]["RequestUserDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseUserDto"];
                        "application/json": components["schemas"]["ResponseUserDto"];
                        "text/json": components["schemas"]["ResponseUserDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/User/ByRol/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all users by role */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Role to look for */
                    role: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseUserDto"][];
                        "application/json": components["schemas"]["ResponseUserDto"][];
                        "text/json": components["schemas"]["ResponseUserDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Branch/{branchId}/Users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign users to specific branch */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description Branch id */
                    branchId: number;
                };
                cookie?: never;
            };
            /** @description List of users */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestUserBranchDto"][];
                    "text/json": components["schemas"]["RequestUserBranchDto"][];
                    "application/*+json": components["schemas"]["RequestUserBranchDto"][];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Branch/{id}/Branch/{branchId}/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if user is available to assign to a branch */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description User id */
                    id: number;
                    /** @description Branch id */
                    branchId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Vendor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a list of suppliers with optional pagination. */
        get: {
            parameters: {
                query?: {
                    PageNumber?: number;
                    PageSize?: number;
                    Paginated?: boolean;
                };
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseVendorDto"][];
                        "application/json": components["schemas"]["ResponseVendorDto"][];
                        "text/json": components["schemas"]["ResponseVendorDto"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        put?: never;
        /** Creates a new supplier. */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description The supplier data to be created. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestVendorDto"];
                    "text/json": components["schemas"]["RequestVendorDto"];
                    "application/*+json": components["schemas"]["RequestVendorDto"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseVendorDto"];
                        "application/json": components["schemas"]["ResponseVendorDto"];
                        "text/json": components["schemas"]["ResponseVendorDto"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Vendor/{vendorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a supplier by its ID. */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the supplier to retrieve. */
                    vendorId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseVendorDto"];
                        "application/json": components["schemas"]["ResponseVendorDto"];
                        "text/json": components["schemas"]["ResponseVendorDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        /** Updates an existing supplier by its ID. */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the supplier to update. */
                    vendorId: number;
                };
                cookie?: never;
            };
            /** @description The updated supplier data. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RequestVendorDto"];
                    "text/json": components["schemas"]["RequestVendorDto"];
                    "application/*+json": components["schemas"]["RequestVendorDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ResponseVendorDto"];
                        "application/json": components["schemas"]["ResponseVendorDto"];
                        "text/json": components["schemas"]["ResponseVendorDto"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Unprocessable Content */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a supplier by its ID. */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "x-api-version"?: string;
                };
                path: {
                    /** @description The ID of the supplier to delete. */
                    vendorId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorDetailsBeYou"];
                        "application/json": components["schemas"]["ErrorDetailsBeYou"];
                        "text/json": components["schemas"]["ErrorDetailsBeYou"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthenticationResult: {
            success?: boolean;
            errors?: string[] | null;
            token?: string | null;
            refreshToken?: string | null;
        };
        ErrorDetailsBeYou: {
            /** @description Type identifier */
            type?: string | null;
            /**
             * Format: int32
             * @description Status code for error
             */
            statusCode?: number;
            /** @description Error message */
            message?: string | null;
            /** @description Error detail */
            detail?: string | null;
            logLevel?: components["schemas"]["LogLevel"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        LogLevel: 0 | 1 | 2 | 3 | 4 | 5 | 6;
        /**
         * Format: int32
         * @enum {integer}
         */
        MonthApplication: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        RequestBranchDto: {
            name?: string | null;
            description?: string | null;
            /** Format: int32 */
            telephone?: number;
            email?: string | null;
            /** Format: int64 */
            districtId?: number;
            address?: string | null;
            /** Format: int64 */
            id?: number;
        };
        RequestBranchHolidayDto: {
            /** Format: int64 */
            holidayId?: number;
            /** Format: int64 */
            branchId?: number;
            /** Format: date */
            date?: string;
            /** Format: int32 */
            year?: number;
        };
        RequestBranchScheduleBlockDto: {
            /** Format: int64 */
            branchScheduleId?: number;
            /** Format: time */
            startHour?: string;
            /** Format: time */
            endHour?: string;
        };
        RequestBranchScheduleDto: {
            /** Format: int64 */
            branchId?: number;
            /** Format: int64 */
            scheduleId?: number;
        };
        RequestHolidayDto: {
            name?: string | null;
            month?: components["schemas"]["MonthApplication"];
            /** Format: int32 */
            day?: number;
            /** Format: int64 */
            id?: number;
        };
        RequestInventoryDto: {
            name?: string | null;
            /** Format: int64 */
            branchId?: number;
            typeInventory?: components["schemas"]["TypeInventoryApplication"];
            /** Format: int64 */
            id?: number;
        };
        RequestInventoryProductDto: {
            /** Format: int64 */
            inventoryId?: number;
            /** Format: int64 */
            productId?: number;
            /** Format: double */
            assignable?: number;
            /** Format: double */
            minimum?: number;
            /** Format: double */
            maximum?: number;
            /** Format: int64 */
            id?: number;
        };
        RequestInventoryProductTransactionDto: {
            /** Format: int64 */
            inventoryProductId?: number;
            transactionType?: components["schemas"]["TransactionTypeInventoryApplication"];
            /** Format: double */
            quantity?: number;
            /** Format: int64 */
            id?: number;
        };
        RequestInvoiceDetailDto: {
            /** Format: int64 */
            invoiceId?: number;
            /** Format: int64 */
            serviceId?: number | null;
            /** Format: int64 */
            productId?: number | null;
            /** Format: int32 */
            lineNumber?: number;
            /** Format: int32 */
            quantity?: number;
            /** Format: double */
            unitPrice?: number;
            /** Format: double */
            subTotal?: number;
            /** Format: double */
            tax?: number;
            /** Format: double */
            total?: number;
            /** Format: int64 */
            id?: number;
        };
        RequestInvoiceDto: {
            /** Format: int64 */
            branchId?: number;
            /** Format: int64 */
            customerId?: number;
            customerName?: string | null;
            /** Format: int64 */
            orderId?: number | null;
            /** Format: date */
            date?: string;
            /** Format: int64 */
            paymentTypeId?: number;
            /** Format: int32 */
            number?: number;
            /** Format: int64 */
            taxId?: number;
            /** Format: double */
            taxRate?: number;
            /** Format: double */
            subTotal?: number;
            /** Format: double */
            tax?: number;
            /** Format: double */
            total?: number;
            invoiceDetails?: components["schemas"]["RequestInvoiceDetailDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        RequestOrderDetailDto: {
            /** Format: int64 */
            orderId?: number;
            /** Format: int64 */
            serviceId?: number | null;
            /** Format: int64 */
            productId?: number | null;
            /** Format: int32 */
            lineNumber?: number;
            /** Format: int32 */
            quantity?: number;
            /** Format: double */
            unitPrice?: number;
            /** Format: double */
            subTotal?: number;
            /** Format: double */
            tax?: number;
            /** Format: double */
            total?: number;
            /** Format: int64 */
            id?: number;
        };
        RequestOrderDto: {
            /** Format: int64 */
            customerId?: number;
            customerName?: string | null;
            /** Format: date */
            date?: string;
            /** Format: int64 */
            paymentTypeId?: number;
            /** Format: int32 */
            number?: number;
            /** Format: int64 */
            taxId?: number;
            /** Format: int64 */
            reservationId?: number;
            /** Format: double */
            taxRate?: number;
            /** Format: double */
            subTotal?: number;
            /** Format: double */
            tax?: number;
            /** Format: double */
            total?: number;
            statusOrderId?: string;
            /** Format: int64 */
            branchId?: number;
            orderDetails?: components["schemas"]["RequestOrderDetailDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        RequestProductDto: {
            name?: string | null;
            description?: string | null;
            brand?: string | null;
            /** Format: int64 */
            categoryId?: number;
            /** Format: double */
            price?: number;
            sku?: string | null;
            /** Format: int64 */
            unitMeasureId?: number;
            /** Format: int64 */
            id?: number;
        };
        RequestReservationDetailDto: {
            /** Format: int64 */
            reservationId?: number;
            /** Format: int64 */
            serviceId?: number | null;
            /** Format: int64 */
            productId?: number | null;
            /** Format: int64 */
            id?: number;
        };
        RequestReservationDto: {
            /** Format: date */
            date?: string;
            /** Format: time */
            hour?: string;
            /** Format: int64 */
            branchId?: number;
            /** Format: int64 */
            customerId?: number;
            customerName?: string | null;
            status?: string | null;
            reservationQuestion?: components["schemas"]["RequestReservationQuestionDto"][] | null;
            reservationDetails?: components["schemas"]["RequestReservationDetailDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        RequestReservationQuestionDto: {
            /** Format: int64 */
            reservationId?: number;
            question?: string | null;
            answer?: string | null;
            /** Format: int64 */
            id?: number;
        };
        RequestScheduleDto: {
            day?: components["schemas"]["WeekDayApplication"];
            /** Format: time */
            startHour?: string;
            /** Format: time */
            endHour?: string;
            /** Format: int64 */
            id?: number;
        };
        RequestServiceDto: {
            name?: string | null;
            description?: string | null;
            /** Format: int64 */
            typeServiceId?: number;
            /** Format: double */
            price?: number;
            observation?: string | null;
            /** Format: int64 */
            id?: number;
        };
        RequestTaxDto: {
            name?: string | null;
            /** Format: double */
            rate?: number;
            /** Format: int64 */
            id?: number;
        };
        RequestUnitMeasureDto: {
            name?: string | null;
            symbol?: string | null;
            /** Format: int64 */
            id?: number;
        };
        RequestUserBranchDto: {
            /** Format: int64 */
            userId?: number;
            /** Format: int64 */
            branchId?: number;
            /** Format: int64 */
            id?: number;
        };
        RequestUserDto: {
            cardId?: string | null;
            firstName?: string | null;
            lastName?: string | null;
            /** Format: int32 */
            telephone?: number;
            email?: string | null;
            /** Format: int64 */
            districtId?: number;
            address?: string | null;
            /** Format: date */
            birthday?: string;
            password?: string | null;
            /** Format: int64 */
            genderId?: number;
            profilePictureUrl?: string | null;
            /** Format: int64 */
            roleId?: number;
            /** Format: int64 */
            id?: number;
        };
        RequestUserLoginDto: {
            email?: string | null;
            password?: string | null;
        };
        RequestVendorDto: {
            name?: string | null;
            fiscalNumber?: string | null;
            socialReason?: string | null;
            /** Format: int32 */
            telephone?: number;
            email?: string | null;
            /** Format: int64 */
            districtId?: number;
            address?: string | null;
            /** Format: int64 */
            id?: number;
        };
        ResponseBranchDto: {
            name?: string | null;
            description?: string | null;
            /** Format: int32 */
            telephone?: number;
            email?: string | null;
            /** Format: int64 */
            districtId?: number;
            address?: string | null;
            district?: components["schemas"]["ResponseDistrictDto"];
            inventories?: components["schemas"]["ResponseInventoryDto"][] | null;
            branchSchedules?: components["schemas"]["ResponseBranchScheduleDto"][] | null;
            userBranches?: components["schemas"]["ResponseUserBranchDto"][] | null;
            branchHolidays?: components["schemas"]["ResponseBranchHolidayDto"][] | null;
            reservas?: components["schemas"]["ResponseReservationDto"][] | null;
            orders?: components["schemas"]["ResponseOrderDto"][] | null;
            invoices?: components["schemas"]["ResponseInvoiceDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseBranchHolidayDto: {
            /** Format: int64 */
            holidayId?: number;
            /** Format: int64 */
            branchId?: number;
            /** Format: date */
            date?: string;
            /** Format: int32 */
            year?: number;
            holiday?: components["schemas"]["ResponseHolidayDto"];
            branch?: components["schemas"]["ResponseBranchDto"];
            /** Format: int64 */
            id?: number;
        };
        ResponseBranchScheduleBlockDto: {
            /** Format: int64 */
            branchScheduleId?: number;
            /** Format: time */
            startHour?: string;
            /** Format: time */
            endHour?: string;
            active?: boolean;
            branchSchedule?: components["schemas"]["ResponseBranchScheduleDto"];
            /** Format: int64 */
            id?: number;
        };
        ResponseBranchScheduleDto: {
            /** Format: int64 */
            branchId?: number;
            /** Format: int64 */
            scheduleId?: number;
            schedule?: components["schemas"]["ResponseScheduleDto"];
            branch?: components["schemas"]["ResponseBranchDto"];
            branchScheduleBlocks?: components["schemas"]["ResponseBranchScheduleBlockDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        ResponseCantonDto: {
            name?: string | null;
            /** Format: int64 */
            provinceId?: number;
            districts?: components["schemas"]["ResponseDistrictDto"][] | null;
            province?: components["schemas"]["ResponseProvinceDto"];
            /** Format: int64 */
            id?: number;
        };
        ResponseCategoryDto: {
            code?: string | null;
            name?: string | null;
            products?: components["schemas"]["ResponseProductDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseContactDto: {
            firstName?: string | null;
            lastName?: string | null;
            /** Format: int32 */
            telephone?: number;
            email?: string | null;
            /** Format: int64 */
            vendorId?: number;
            vendor?: components["schemas"]["ResponseVendorDto"];
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseCustomerDto: {
            firstName?: string | null;
            lastName?: string | null;
            email?: string | null;
            /** Format: int32 */
            telephone?: number;
            /** Format: int64 */
            districtId?: number;
            address?: string | null;
            invoices?: components["schemas"]["ResponseInvoiceDto"][] | null;
            reservations?: components["schemas"]["ResponseReservationDto"][] | null;
            district?: components["schemas"]["ResponseDistrictDto"];
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseDistrictDto: {
            name?: string | null;
            /** Format: int64 */
            cantonId?: number;
            customers?: components["schemas"]["ResponseCustomerDto"][] | null;
            canton?: components["schemas"]["ResponseCantonDto"];
            vendors?: components["schemas"]["ResponseVendorDto"][] | null;
            branches?: components["schemas"]["ResponseBranchDto"][] | null;
            users?: components["schemas"]["ResponseUserDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        ResponseGenderDto: {
            name?: string | null;
            users?: components["schemas"]["ResponseUserDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        ResponseHolidayDto: {
            name?: string | null;
            month?: components["schemas"]["MonthApplication"];
            /** Format: int32 */
            day?: number;
            branchHolidays?: components["schemas"]["ResponseBranchHolidayDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseInventoryDto: {
            name?: string | null;
            /** Format: int64 */
            branchId?: number;
            typeInventory?: components["schemas"]["TypeInventoryApplication"];
            branch?: components["schemas"]["ResponseBranchDto"];
            inventoryProducts?: components["schemas"]["ResponseInventoryProductDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseInventoryProductDto: {
            /** Format: int64 */
            inventoryId?: number;
            /** Format: int64 */
            productId?: number;
            /** Format: double */
            assignable?: number;
            /** Format: double */
            minimum?: number;
            /** Format: double */
            maximum?: number;
            inventory?: components["schemas"]["ResponseInventoryDto"];
            product?: components["schemas"]["ResponseProductDto"];
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseInventoryProductTransactionDto: {
            /** Format: int64 */
            inventoryProductId?: number;
            transactionType?: components["schemas"]["TransactionTypeInventoryApplication"];
            /** Format: double */
            quantity?: number;
            inventoryProduct?: components["schemas"]["ResponseInventoryProductDto"];
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseInvoiceDetailDto: {
            /** Format: int64 */
            invoiceId?: number;
            /** Format: int64 */
            serviceId?: number | null;
            /** Format: int64 */
            productId?: number | null;
            /** Format: int32 */
            lineNumber?: number;
            /** Format: int32 */
            quantity?: number;
            /** Format: double */
            unitPrice?: number;
            /** Format: double */
            subTotal?: number;
            /** Format: double */
            tax?: number;
            /** Format: double */
            total?: number;
            invoiceDetailProducts?: components["schemas"]["ResponseInvoiceDetailProductDto"][] | null;
            invoice?: components["schemas"]["ResponseInvoiceDto"];
            service?: components["schemas"]["ResponseServiceDto"];
            /** Format: int64 */
            id?: number;
        };
        ResponseInvoiceDetailProductDto: {
            /** Format: int64 */
            invoiceDetailId?: number;
            /** Format: int64 */
            productId?: number;
            /** Format: double */
            quantity?: number;
            invoiceDetail?: components["schemas"]["ResponseInvoiceDetailDto"];
            product?: components["schemas"]["ResponseProductDto"];
            /** Format: int64 */
            id?: number;
        };
        ResponseInvoiceDto: {
            /** Format: int64 */
            customerId?: number;
            customerName?: string | null;
            /** Format: int64 */
            orderId?: number | null;
            /** Format: date */
            date?: string;
            /** Format: int64 */
            paymentTypeId?: number;
            /** Format: int32 */
            number?: number;
            /** Format: int64 */
            taxId?: number;
            /** Format: double */
            taxRate?: number;
            /** Format: double */
            subTotal?: number;
            /** Format: double */
            tax?: number;
            /** Format: double */
            total?: number;
            /** Format: int64 */
            branchId?: number;
            invoiceDetails?: components["schemas"]["ResponseInvoiceDetailDto"][] | null;
            customer?: components["schemas"]["ResponseCustomerDto"];
            taxInfo?: components["schemas"]["ResponseTaxDto"];
            paymentType?: components["schemas"]["ResponsePaymentTypeDto"];
            order?: components["schemas"]["ResponseOrderDto"];
            branch?: components["schemas"]["ResponseBranchDto"];
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseMeDto: {
            firstName?: string | null;
            lastName?: string | null;
            readonly fullName?: string | null;
            role?: components["schemas"]["ResponseRoleDto"];
        };
        ResponseOrderDetailDto: {
            /** Format: int64 */
            orderId?: number;
            /** Format: int64 */
            serviceId?: number | null;
            /** Format: int64 */
            productId?: number | null;
            /** Format: int32 */
            lineNumber?: number;
            /** Format: int32 */
            quantity?: number;
            /** Format: double */
            unitPrice?: number;
            /** Format: double */
            subtotal?: number;
            /** Format: double */
            tax?: number;
            /** Format: double */
            total?: number;
            orderDetailProducts?: components["schemas"]["ResponseOrderDetailProductDto"][] | null;
            order?: components["schemas"]["ResponseOrderDto"];
            service?: components["schemas"]["ResponseServiceDto"];
            /** Format: int64 */
            id?: number;
        };
        ResponseOrderDetailProductDto: {
            /** Format: int64 */
            orderDetailId?: number;
            /** Format: int64 */
            productId?: number;
            /** Format: double */
            quantity?: number;
            orderDetail?: components["schemas"]["ResponseOrderDetailDto"];
            product?: components["schemas"]["ResponseProductDto"];
            /** Format: int64 */
            id?: number;
        };
        ResponseOrderDto: {
            /** Format: int64 */
            customerId?: number;
            customerName?: string | null;
            /** Format: date */
            date?: string;
            /** Format: int64 */
            paymentTypeId?: number;
            /** Format: int32 */
            number?: number;
            /** Format: int64 */
            taxId?: number;
            /** Format: int64 */
            reservationId?: number;
            /** Format: double */
            taxRate?: number;
            /** Format: double */
            subTotal?: number;
            /** Format: double */
            tax?: number;
            /** Format: double */
            total?: number;
            statusOrderId?: string;
            /** Format: int64 */
            branchId?: number;
            orderDetails?: components["schemas"]["ResponseOrderDetailDto"][] | null;
            customer?: components["schemas"]["ResponseCustomerDto"];
            taxInfo?: components["schemas"]["ResponseTaxDto"];
            paymentType?: components["schemas"]["ResponsePaymentTypeDto"];
            reservation?: components["schemas"]["ResponseReservationDto"];
            branch?: components["schemas"]["ResponseBranchDto"];
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponsePaymentTypeDto: {
            description?: string | null;
            /** Format: int32 */
            referenceNumber?: number;
            invoices?: components["schemas"]["ResponseInvoiceDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        ResponseProductDto: {
            name?: string | null;
            description?: string | null;
            brand?: string | null;
            /** Format: int64 */
            categoryId?: number;
            /** Format: double */
            price?: number;
            sku?: string | null;
            /** Format: int64 */
            unitMeasureId?: number;
            invoiceDetailProducts?: components["schemas"]["ResponseInvoiceDetailProductDto"][] | null;
            category?: components["schemas"]["ResponseCategoryDto"];
            unitMeasure?: components["schemas"]["ResponseUnitMeasureDto"];
            inventarios?: components["schemas"]["ResponseInventoryDto"][] | null;
            inventoryProducts?: components["schemas"]["ResponseInventoryProductDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseProvinceDto: {
            name?: string | null;
            cantons?: components["schemas"]["ResponseCantonDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        ResponseReservationCalendarAgendaDto: {
            title?: string | null;
            description?: string | null;
            /** Format: date-time */
            start?: string;
            /** Format: date-time */
            end?: string;
            classNames?: string | null;
            icon?: string | null;
            allDay?: boolean;
            display?: string | null;
        };
        ResponseReservationDetailDto: {
            /** Format: int64 */
            reservationId?: number;
            /** Format: int64 */
            serviceId?: number | null;
            /** Format: int64 */
            productId?: number | null;
            reservation?: components["schemas"]["ResponseReservationDto"];
            service?: components["schemas"]["ResponseServiceDto"];
            product?: components["schemas"]["ResponseProductDto"];
            /** Format: int64 */
            id?: number;
        };
        ResponseReservationDto: {
            /** Format: date */
            date?: string;
            /** Format: time */
            hour?: string;
            /** Format: int64 */
            branchId?: number;
            /** Format: int64 */
            customerId?: number;
            customerName?: string | null;
            status?: string | null;
            branch?: components["schemas"]["ResponseBranchDto"];
            customer?: components["schemas"]["ResponseCustomerDto"];
            reservationQuestions?: components["schemas"]["ResponseReservationQuestionDto"][] | null;
            reservationDetails?: components["schemas"]["ResponseReservationDetailDto"][] | null;
            orders?: components["schemas"]["ResponseOrderDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseReservationQuestionDto: {
            /** Format: int64 */
            reservationId?: number;
            question?: string | null;
            answer?: string | null;
            reservation?: components["schemas"]["ResponseReservationDto"];
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseRoleDto: {
            description?: string | null;
            type?: string | null;
            users?: components["schemas"]["ResponseUserDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseScheduleDto: {
            day?: components["schemas"]["WeekDayApplication"];
            /** Format: time */
            startHour?: string;
            /** Format: time */
            endHour?: string;
            branchSchedules?: components["schemas"]["ResponseBranchScheduleDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseServiceDto: {
            name?: string | null;
            description?: string | null;
            /** Format: int64 */
            typeServiceId?: number;
            /** Format: double */
            price?: number;
            observation?: string | null;
            invoiceDetails?: components["schemas"]["ResponseInvoiceDetailDto"][] | null;
            typeService?: components["schemas"]["ResponseTypeServiceDto"];
            detalleReservas?: components["schemas"]["ResponseReservationDetailDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseTaxDto: {
            name?: string | null;
            /** Format: double */
            rate?: number;
            invoices?: components["schemas"]["ResponseInvoiceDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        ResponseTypeServiceDto: {
            name?: string | null;
            /** Format: time */
            duration?: string;
            services?: components["schemas"]["ResponseServiceDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        ResponseUnitMeasureDto: {
            name?: string | null;
            symbol?: string | null;
            products?: components["schemas"]["ResponseProductDto"][] | null;
            /** Format: int64 */
            id?: number;
        };
        ResponseUserBranchDto: {
            /** Format: int64 */
            userId?: number;
            /** Format: int64 */
            branchId?: number;
            branch?: components["schemas"]["ResponseBranchDto"];
            user?: components["schemas"]["ResponseUserDto"];
            /** Format: int64 */
            id?: number;
        };
        ResponseUserDto: {
            cardId?: string | null;
            firstName?: string | null;
            lastName?: string | null;
            /** Format: int32 */
            telephone?: number;
            email?: string | null;
            /** Format: int64 */
            districtId?: number;
            address?: string | null;
            /** Format: date */
            birthday?: string;
            /** Format: int64 */
            genderId?: number;
            profilePictureUrl?: string | null;
            /** Format: int64 */
            roleId?: number;
            district?: components["schemas"]["ResponseDistrictDto"];
            gender?: components["schemas"]["ResponseGenderDto"];
            role?: components["schemas"]["ResponseRoleDto"];
            userBranches?: components["schemas"]["ResponseUserBranchDto"][] | null;
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        ResponseVendorDto: {
            name?: string | null;
            fiscalNumber?: string | null;
            socialReason?: string | null;
            /** Format: int32 */
            telephone?: number;
            email?: string | null;
            /** Format: int64 */
            districtId?: number;
            address?: string | null;
            contacts?: components["schemas"]["ResponseContactDto"][] | null;
            district?: components["schemas"]["ResponseDistrictDto"];
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            createdBy?: string | null;
            /** Format: date-time */
            updated?: string | null;
            updatedBy?: string | null;
            active?: boolean;
        };
        TokenModel: {
            token?: string | null;
            refreshToken?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        TransactionTypeInventoryApplication: 1 | 2;
        /**
         * Format: int32
         * @enum {integer}
         */
        TypeInventoryApplication: 1 | 2;
        /**
         * Format: int32
         * @enum {integer}
         */
        WeekDayApplication: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
